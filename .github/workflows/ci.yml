name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # TypeScript/Node.js jobs
  lint-ts:
    name: Lint TypeScript
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint

  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run typecheck

  test-ts:
    name: Test TypeScript
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm run test

  build-ts:
    name: Build TypeScript
    runs-on: ubuntu-latest
    needs: [lint-ts, typecheck, test-ts]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build

  # Python jobs
  lint-python:
    name: Lint Python
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/workers
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 mypy
      
      - name: Format check
        run: |
          black --check src/ tests/
          isort --check-only src/ tests/
      
      - name: Lint
        run: flake8 src/ tests/
      
      - name: Type check
        run: mypy src/

  test-python:
    name: Test Python
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/workers
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          OPENAI_API_KEY: test-key
        run: pytest --cov=src --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/workers/coverage.xml
          flags: python
          name: python-coverage

  # Integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-ts, test-python]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Start services
        run: |
          docker-compose up -d postgres redis nats minio
          sleep 30  # Wait for services to be ready
      
      - name: Run integration tests
        run: |
          # Add integration test commands here
          echo "Integration tests would run here"
      
      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Asset pipeline (for Unity builds)
  unity-build:
    name: Unity Build Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: apps/unity-client/Library
          key: Library-${{ hashFiles('apps/unity-client/Assets/**', 'apps/unity-client/Packages/**', 'apps/unity-client/ProjectSettings/**') }}
          restore-keys: |
            Library-
      
      - name: Unity Build
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: apps/unity-client
          targetPlatform: StandaloneWindows64
          buildName: ai-vr-tour-guide
      
      - name: Upload Unity Build
        uses: actions/upload-artifact@v3
        with:
          name: unity-build
          path: build/
